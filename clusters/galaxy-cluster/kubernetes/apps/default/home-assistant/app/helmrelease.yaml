---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: home-assistant
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  values:
    controllers:
      home-assistant:
        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          annotations:
            k8s.v1.cni.cncf.io/networks: network/multus-local
          securityContext:
            runAsUser: 65534
            runAsGroup: 65533
            fsGroup: 65533
            fsGroupChangePolicy: OnRootMismatch

        initContainers:
          setup-config:
            enabled: true
            env:
              FORCE_INIT: false
            image:
              repository: mikefarah/yq
              tag: "4"
              pullPolicy: IfNotPresent
            command: ["/bin/sh", "-c"]
            args:
              - /bin/sh /mnt/init/init.sh

        containers:
          app:
            image:
              repository: ghcr.io/home-operations/home-assistant
              tag: 2025.8.3@sha256:7ef14f513e487add292b43306cccb4f1cd9dbcbd5eaf85d6438f98b197f930a4 
            envFrom:
              - secretRef:
                  name: home-assistant-secrets
            resources:
              requests:
                cpu: 100m
                memory: 2Gi
              limits:
                memory: 2Gi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    configMaps:
      init-script:
        enabled: true
        data:
          init.sh: |
            #!/bin/bash
            set -e

            # Check if the configuration file exists
            if [ ! -f /config/configuration.yaml ]; then
              echo "Configuration file not found, creating a new one"
              cp /config-templates/configuration.yaml /config/configuration.yaml
            fi

            # Check if the force init is enabled
            if [ "$FORCE_INIT" = "true" ]; then
              echo "Force init is enabled, overwriting the configuration file"
              current_time=$(date +%Y%m%d_%H%M%S)
              echo "Backup the current configuration file to configuration.yaml.$current_time"
              cp /config/configuration.yaml /config/configuration.yaml.$current_time
              echo "Before cleanup - all backup files:"
              ls -l /config/configuration.yaml.*
              echo "Cleaning up - keeping only 10 most recent backups..."
              ls -t /config/configuration.yaml.* 2>/dev/null | tail -n +11 | xargs -r rm
              echo "After cleanup - remaining backup files:"
              ls -l /config/configuration.yaml.*
              echo "The current configuration file will be merged with the default configuration file with this content:"
              cat /config-templates/configuration.yaml
              if [[ ! -s /config/configuration.yaml ]]; then
                # If /config/configuration.yaml is empty, use the content of /config-templates/configuration.yaml
                cat /config-templates/configuration.yaml > /config/configuration.yaml
              else
                # Perform the merge operation if /config/configuration.yaml is not empty
                yq eval-all --inplace 'select(fileIndex == 0) *d select(fileIndex == 1)' /config/configuration.yaml /config-templates/configuration.yaml
              fi
            fi

            # Check if the automations file exists
            if [ ! -f /config/automations.yaml ]; then
              echo "Automations file not found, creating a new one"
              touch /config/automations.yaml
              echo "[]" >> /config/automations.yaml
            fi

            # Check if the scripts file exists
            if [ ! -f /config/scripts.yaml ]; then
              echo "Scripts file not found, creating a new one"
              touch /config/scripts.yaml
            fi

            # Check if the scenes file exists
            if [ ! -f /config/scenes.yaml ]; then
              echo "Scenes file not found, creating a new one"
              touch /config/scenes.yaml
            fi


    service:
      app:
        primary: true
        controller: home-assistant
        type: ClusterIP
        ports:
          http:
            port: 8123

    persistence:
      config:
        name: hass-config
        type: configMap
        advancedMounts:
          home-assistant:
            setup-config:
              - path: /config-templates

      config-claim:
        existingClaim: hass-config
        advancedMounts:
          home-assistant:
            app:
              - path: /config
            setup-config:
              - path: /config

      init-script:
        type: configMap
        name: init-script
        advancedMounts:
          home-assistant:
            setup-config:
              - path: /mnt/init/init.sh
            
      tmpfs:
        type: emptyDir
        advancedMounts:
          home-assistant:
            app:
              - path: /tmp
                subPath: hass-tmp

    ingress:
      app:
        annotations:
          kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: letsencrypt-prod
        hosts:
          - host: "ha.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - secretName: home-assistant-tls
            hosts:
              - ha.${SECRET_DOMAIN}