---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: radarr
spec:
  interval: 30m
  timeout: 15m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/radarr
              tag: 5.26.2@sha256:7eb64f5af8bbe48e79bc55c0c37ca8db89b2f073a9ff0094f603916ae1df9de8 
            env:
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__POSTGRES__HOST: local-database-rw.database.svc.cluster.local
              RADARR__POSTGRES__PORT: 5432
              RADARR__POSTGRES__MAINDB: radarr-main-a
              RADARR__POSTGRES__LOGDB: radarr-log-a
              RADARR__POSTGRES__USER: generalApps
              RADARR__LOG__ANALYTICSENABLED: false
              RADARR__LOG__LEVEL: info
              TZ: ${SECRET_TZ}
            envFrom:
              - secretRef:
                  name: radarr-secrets
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: 7878
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 1Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: radarr
        ports:
          http:
            port: 7878
    ingress:
      app:
        annotations:
          kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: letsencrypt-prod
        hosts:
          - host: "radarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - secretName: radarr-tls
            hosts:
              - radarr.${SECRET_DOMAIN}
    persistence:
      config:
        existingClaim: "radarr"
      media:
        type: nfs
        server: 192.168.31.21
        path: /mnt/MainPool/Media/Movies
        globalMounts:
          - path: /media
      downloads:
        type: nfs
        server: 192.168.31.21
        path: /mnt/MainPool/Downloads/Torrents
        globalMounts:
          - path: /downloads
      tmp:
        type: emptyDir