---
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: kube-prometheus-stack
spec:
  interval: 10m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 77.14.0
  url: oci://ghcr.io/prometheus-community/charts/kube-prometheus-stack
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 30m
  timeout: 5m
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  values:
    crds:
      enabled: true

    ###
    ### Component values
    ###
    alertmanager:
      enabled: true
      ingress:
        enabled: true
        annotations:
          kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: letsencrypt-prod
        hosts:
          - alertmanager.${SECRET_DOMAIN}
        paths:
          - /
        pathType: Prefix
        tls: 
          - secretName: alertmanager-general-tls
            hosts:
              - alertmanager.${SECRET_DOMAIN}

      alertmanagerSpec:
        alertmanagerConfiguration:
          name: alertmanager
          global:
            resolveTimeout: 5m
        externalUrl: https://alertmanager.${SECRET_DOMAIN}
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "openebs-hostpath"
              resources:
                requests:
                  storage: 1Gi

    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

    kubeProxy:
      enabled: false

    grafana:
      enabled: true
      serviceAccount:
        create: true
        autoMount: true

      serviceMonitor:
        enabled: true

      sidecar:
        image:
          registry: ghcr.io
          repository: home-operations/k8s-sidecar
          tag: 1.30.10@sha256:dd3b1f0c4e6b4512b2deb50c58acf65fd0f0927120a59a95eec854d32a6c9ce3
        dashboards:
          enabled: true
          searchNamespace: ALL
          label: grafana_dashboard
          folderAnnotation: grafana_folder
          provider:
            disableDelete: true
            foldersFromFilesStructure: true
        datasources:
          enabled: true
          searchNamespace: ALL
          labelValue: ""

      testFramework:
        enabled: false

      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: default
              disableDeletion: false
              editable: true
              folder: ""
              options:
                path: /var/lib/grafana/dashboards/default
              orgId: 1
              type: file
            - name: flux
              orgId: 1
              folder: Flux
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/flux
            - name: kubernetes
              orgId: 1
              folder: Kubernetes
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/kubernetes
            - name: postgres
              orgId: 1
              folder: Postgres
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/postgres

      dashboards:
        default:
          cert-manager:
            # renovate: dashboardName="Cert-manager-Kubernetes"
            gnetId: 20842
            revision: 3
            datasource: Prometheus

          node-exporter-full:
            # renovate: dashboardName="Node Exporter Full"
            gnetId: 1860
            revision: 41
            datasource:
              - {name: DS_PROMETHEUS, value: Prometheus,}

          smartctl-exporter:
            # renovate: dashboardName="SMARTctl Exporter Dashboard"
            gnetId: 22604
            revision: 2
            datasource:
              - {name: DS_PROMETHEUS, value: Prometheus,}

        flux:
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/cluster.json
            datasource: Prometheus
          flux-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/control-plane.json
            datasource: Prometheus
          flux-logs:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/logs.json
            datasource: Prometheus

        kubernetes:
          k8s-system-api-server:
            # renovate: dashboardName="Kubernetes / System / API Server"
            gnetId: 15761
            revision: 19
            datasource: Prometheus
          k8s-views-global:
            # renovate: dashboardName="Kubernetes / Views / Global"
            gnetId: 15757
            revision: 43
            datasource: Prometheus
          k8s-views-nodes:
            # renovate: dashboardName="Kubernetes / Views / Nodes"
            gnetId: 15759
            revision: 37
            datasource: Prometheus
          k8s-views-namespaces:
            # renovate: dashboardName="Kubernetes / Views / Namespaces"
            gnetId: 15758
            revision: 42
            datasource: Prometheus
          k8s-views-pods:
            # renovate: dashboardName="Kubernetes / Views / Pods"
            gnetId: 15760
            revision: 36
            datasource: Prometheus
          k8s-volumes:
            # renovate: dashboardName="K8s / Storage / Volumes / Cluster"
            gnetId: 11454
            revision: 14
            datasource: Prometheus
   
      env:
        GF_ANALYTICS_CHECK_FOR_UPDATES: false
        GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES: false
        GF_ANALYTICS_REPORTING_ENABLED: false
        GF_AUTH_ANONYMOUS_ENABLED: false
        GF_AUTH_BASIC_ENABLED: false
        GF_DATE_FORMATS_USE_BROWSER_LOCALE: true
        GF_EXPLORE_ENABLED: true
        GF_FEATURE_TOGGLES_ENABLE: publicDashboards
        GF_LOG_MODE: console
        GF_NEWS_NEWS_FEED_ENABLED: false
        GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: natel-discrete-panel,pr0ps-trackmap-panel,panodata-map-panel
        GF_SECURITY_COOKIE_SAMESITE: grafana
        GF_SERVER_ROOT_URL: https://grafana.${SECRET_DOMAIN}

      imageRenderer:
        enabled: true

      persistence:
        enabled: false

      plugins:
        - grafana-clock-panel
        - grafana-piechart-panel
        - grafana-worldmap-panel
        - natel-discrete-panel
        - pr0ps-trackmap-panel
        - vonage-status-panel

      admin:
        existingSecret: prom-stack-secrets
      ingress:
        enabled: true
        hosts:
          - grafana.${SECRET_DOMAIN}
        annotations:
          kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: letsencrypt-prod
        paths:
          - /
        pathType: Prefix
        tls: 
          - secretName: grafana-tls
            hosts:
              - grafana.${SECRET_DOMAIN}

    ###
    ### Prometheus operator values
    ###
    prometheusOperator:
      resources:
        requests:
          cpu: 35m
          memory: 273M
        limits:
          memory: 326M

      prometheusConfigReloader:
        # resource config for prometheusConfigReloader
        resources:
          requests:
            cpu: 5m
            memory: 32M
          limits:
            memory: 32M

    ###
    ### Prometheus instance values
    ###
    prometheus:
      prometheusSpec:
        image:
          registry: docker.io
          repository: prompp/prompp
          tag: 2.53.2-0.4.0
        securityContext:
          runAsNonRoot: true
          runAsUser: 64535
          runAsGroup: 64535
          fsGroup: 64535
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 2000M
        retention: 14d
        retentionSize: 50GB
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        scrapeInterval: 1m # Must match interval in Grafana Helm chart
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "openebs-hostpath"
              resources:
                requests:
                  storage: 55Gi

      ingress:
        enabled: true
        hosts:
          - prometheus.${SECRET_DOMAIN}
        paths:
          - /
        pathType: Prefix
        annotations:
          kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: letsencrypt-prod
        tls: 
          - secretName: prometheus-general-tls
            hosts:
              - prometheus.${SECRET_DOMAIN}